// Generated by gencpp from file pwm/motor0.msg
// DO NOT EDIT!


#ifndef PWM_MESSAGE_MOTOR0_H
#define PWM_MESSAGE_MOTOR0_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pwm
{
template <class ContainerAllocator>
struct motor0_
{
  typedef motor0_<ContainerAllocator> Type;

  motor0_()
    : dire(false)
    , duty(0)  {
    }
  motor0_(const ContainerAllocator& _alloc)
    : dire(false)
    , duty(0)  {
  (void)_alloc;
    }



   typedef uint8_t _dire_type;
  _dire_type dire;

   typedef int8_t _duty_type;
  _duty_type duty;





  typedef boost::shared_ptr< ::pwm::motor0_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pwm::motor0_<ContainerAllocator> const> ConstPtr;

}; // struct motor0_

typedef ::pwm::motor0_<std::allocator<void> > motor0;

typedef boost::shared_ptr< ::pwm::motor0 > motor0Ptr;
typedef boost::shared_ptr< ::pwm::motor0 const> motor0ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pwm::motor0_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pwm::motor0_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pwm::motor0_<ContainerAllocator1> & lhs, const ::pwm::motor0_<ContainerAllocator2> & rhs)
{
  return lhs.dire == rhs.dire &&
    lhs.duty == rhs.duty;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pwm::motor0_<ContainerAllocator1> & lhs, const ::pwm::motor0_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pwm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pwm::motor0_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pwm::motor0_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pwm::motor0_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pwm::motor0_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pwm::motor0_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pwm::motor0_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pwm::motor0_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e1014bb8e7f30732d4a3a679f6e8c576";
  }

  static const char* value(const ::pwm::motor0_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe1014bb8e7f30732ULL;
  static const uint64_t static_value2 = 0xd4a3a679f6e8c576ULL;
};

template<class ContainerAllocator>
struct DataType< ::pwm::motor0_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pwm/motor0";
  }

  static const char* value(const ::pwm::motor0_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pwm::motor0_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool dire\n"
"int8 duty\n"
;
  }

  static const char* value(const ::pwm::motor0_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pwm::motor0_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dire);
      stream.next(m.duty);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motor0_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pwm::motor0_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pwm::motor0_<ContainerAllocator>& v)
  {
    s << indent << "dire: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dire);
    s << indent << "duty: ";
    Printer<int8_t>::stream(s, indent + "  ", v.duty);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PWM_MESSAGE_MOTOR0_H
